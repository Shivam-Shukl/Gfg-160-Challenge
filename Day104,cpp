

class Solution {
  public:
    vector<int> maxOfMins(vector<int>& arr) {
        stack<int> st, st2;
        int n = arr.size();
        vector<int> left(n, -1), right(n, n);

        for (int i = 0; i < n; i++) {
            while (!st.empty() && arr[i] <= arr[st.top()]) {
                st.pop();
            }
            if (!st.empty()) {
                left[i] = st.top();
            }
            st.push(i);
        }

        for (int i = n - 1; i >= 0; i--) {
            while (!st2.empty() && arr[i] <= arr[st2.top()]) {
                st2.pop();
            }
            if (!st2.empty()) {
                right[i] = st2.top();
            }
            st2.push(i);
        }

        vector<int> ans(n, 0);
        
        for (int i = 0; i < n; i++) {
            int windowSize = right[i] - left[i] - 1;
            ans[windowSize - 1] = max(ans[windowSize - 1], arr[i]);
        }

        for (int i = n - 2; i >= 0; i--) {
            ans[i] = max(ans[i], ans[i + 1]);
        }

        return ans;
    }
};
