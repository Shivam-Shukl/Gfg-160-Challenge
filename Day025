
// User function Template for C++

class Solution {
  public:
    vector<vector<int>> insertInterval(vector<vector<int>> &arr,
                                       vector<int> &newInterval) {
        // code here
        int ele1 = newInterval[0];
        int ele2 = newInterval[1];
        int n = arr.size();
        vector<vector<int>> ans;
        ans.push_back(arr[0]);
        bool isIn = false;
        
        
        for(int i=1;i<n;i++)
        {
            int fir = arr[i][0];
            int sec = arr[i][1];
            int prevFir = ans.back()[0];
            int prevSec = ans.back()[1];
            
            if(ele1 <= prevSec && !isIn)
            {
                prevSec = max(prevSec,ele2);
                prevFir = min(prevFir, ele1);
                ans.back()[1] = prevSec;
                ans.back()[0] = prevFir;
                isIn = true;
            }else if(fir >= ele1 && isIn == false)
            {
                ans.push_back({ele1,ele2});
                isIn = true;
    
            }
            prevFir = ans.back()[0];
            prevSec = ans.back()[1];
            
            if(fir <= prevSec)
            {
                prevSec = max(prevSec,sec);
                prevFir = min(prevFir,fir);
                ans.back()[1] = prevSec;
                ans.back()[0] = prevFir;

            }else{
                ans.push_back({fir,sec});
            }
        }
        if(isIn==false)
        {
            
            int prevFir = ans.back()[0];
            int prevSec = ans.back()[1];
            if(ele1 <= prevSec)
            {
                prevSec = max(prevSec,ele2);
                prevFir = min(prevFir, ele1);
                ans.back()[1] = prevSec;
                ans.back()[0] = prevFir;
            }else{
                ans.push_back({ele1,ele2});
            }
        }
        return ans;
    }
};
